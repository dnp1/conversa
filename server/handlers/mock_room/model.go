// Automatically generated by MockGen. DO NOT EDIT!
// Source: github.com/dnp1/conversa/server/handlers/room (interfaces: Model)

package mock_room

import (
	room "github.com/dnp1/conversa/server/data/room"
	errors "github.com/dnp1/conversa/server/errors"
	gomock "github.com/golang/mock/gomock"
)

// Mock of Model interface
type MockModel struct {
	ctrl     *gomock.Controller
	recorder *_MockModelRecorder
}

// Recorder for MockModel (not exported)
type _MockModelRecorder struct {
	mock *MockModel
}

func NewMockModel(ctrl *gomock.Controller) *MockModel {
	mock := &MockModel{ctrl: ctrl}
	mock.recorder = &_MockModelRecorder{mock}
	return mock
}

func (_m *MockModel) EXPECT() *_MockModelRecorder {
	return _m.recorder
}

func (_m *MockModel) All() ([]room.Data, errors.Error) {
	ret := _m.ctrl.Call(_m, "All")
	ret0, _ := ret[0].([]room.Data)
	ret1, _ := ret[1].(errors.Error)
	return ret0, ret1
}

func (_mr *_MockModelRecorder) All() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "All")
}

func (_m *MockModel) Create(_param0 string, _param1 string) errors.Error {
	ret := _m.ctrl.Call(_m, "Create", _param0, _param1)
	ret0, _ := ret[0].(errors.Error)
	return ret0
}

func (_mr *_MockModelRecorder) Create(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Create", arg0, arg1)
}

func (_m *MockModel) Delete(_param0 string, _param1 string) errors.Error {
	ret := _m.ctrl.Call(_m, "Delete", _param0, _param1)
	ret0, _ := ret[0].(errors.Error)
	return ret0
}

func (_mr *_MockModelRecorder) Delete(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Delete", arg0, arg1)
}

func (_m *MockModel) Rename(_param0 string, _param1 string, _param2 string) errors.Error {
	ret := _m.ctrl.Call(_m, "Rename", _param0, _param1, _param2)
	ret0, _ := ret[0].(errors.Error)
	return ret0
}

func (_mr *_MockModelRecorder) Rename(arg0, arg1, arg2 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Rename", arg0, arg1, arg2)
}
