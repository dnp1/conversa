// Automatically generated by MockGen. DO NOT EDIT!
// Source: github.com/dnp1/conversa/server/room (interfaces: Room)

package mock_room

import (
	room "github.com/dnp1/conversa/server/room"
	gomock "github.com/golang/mock/gomock"
)

// Mock of Room interface
type MockRoom struct {
	ctrl     *gomock.Controller
	recorder *_MockRoomRecorder
}

// Recorder for MockRoom (not exported)
type _MockRoomRecorder struct {
	mock *MockRoom
}

func NewMockRoom(ctrl *gomock.Controller) *MockRoom {
	mock := &MockRoom{ctrl: ctrl}
	mock.recorder = &_MockRoomRecorder{mock}
	return mock
}

func (_m *MockRoom) EXPECT() *_MockRoomRecorder {
	return _m.recorder
}

func (_m *MockRoom) All() ([]room.Data, error) {
	ret := _m.ctrl.Call(_m, "All")
	ret0, _ := ret[0].([]room.Data)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockRoomRecorder) All() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "All")
}

func (_m *MockRoom) AllByUser(_param0 string) ([]room.Data, error) {
	ret := _m.ctrl.Call(_m, "AllByUser", _param0)
	ret0, _ := ret[0].([]room.Data)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockRoomRecorder) AllByUser(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "AllByUser", arg0)
}

func (_m *MockRoom) Create(_param0 string, _param1 string) error {
	ret := _m.ctrl.Call(_m, "Create", _param0, _param1)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockRoomRecorder) Create(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Create", arg0, arg1)
}

func (_m *MockRoom) Delete(_param0 string, _param1 string) error {
	ret := _m.ctrl.Call(_m, "Delete", _param0, _param1)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockRoomRecorder) Delete(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Delete", arg0, arg1)
}

func (_m *MockRoom) Rename(_param0 string, _param1 string, _param2 string) error {
	ret := _m.ctrl.Call(_m, "Rename", _param0, _param1, _param2)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockRoomRecorder) Rename(arg0, arg1, arg2 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Rename", arg0, arg1, arg2)
}
